{"version":3,"sources":["components/Carousel/Carousel.tsx","components/CarouselMenu/CarouselMenu.tsx","App.tsx","index.tsx"],"names":["Carousel","images","frameSize","step","itemWidth","isInfinite","animationDuration","useState","currentIndex","setCurrentIndex","isTransition","setIsTransition","useEffect","length","newPrevious","output","index","push","reverse","renderPrevious","newNext","renderNewNext","disabled","customTransform","customTransition","customWidth","className","type","onClick","prevState","style","width","transform","transition","onTransitionEnd","map","item","src","alt","image","maxIndex","CarouselMenu","setFrameSize","setStep","setItemWidth","setIsInfinite","setAnimationDuration","id","name","min","max","value","onChange","e","target","checked","imagesFromServer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.140e5fa8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  frameSize: number;\n  step: number;\n  itemWidth: number;\n  isInfinite: boolean;\n  animationDuration: number,\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images, frameSize, step, itemWidth, isInfinite, animationDuration,\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isTransition, setIsTransition] = useState(true);\n\n  useEffect(() => {\n    if (isInfinite) {\n      if (currentIndex === frameSize || currentIndex === images.length) {\n        setIsTransition(true);\n      }\n    }\n  }, [currentIndex, isInfinite, frameSize, images.length]);\n\n  const nextButton = () => {\n    const maxIndex = isInfinite\n      ? images.length + frameSize\n      : images.length - frameSize;\n\n    if (currentIndex + step > maxIndex) {\n      setCurrentIndex(maxIndex);\n    } else {\n      setCurrentIndex(prevState => prevState + step);\n    }\n  };\n\n  const previousButton = () => {\n    if (isInfinite || currentIndex > 0) {\n      if (currentIndex - step < 0) {\n        setCurrentIndex(0);\n      } else {\n        setCurrentIndex(prevState => prevState - step);\n      }\n    }\n  };\n\n  const handleTransition = () => {\n    if (isInfinite) {\n      if (currentIndex === 0) {\n        setIsTransition(false);\n        setCurrentIndex(images.length);\n      } else if (currentIndex === images.length + frameSize) {\n        setIsTransition(false);\n        setCurrentIndex(frameSize);\n      }\n    }\n  };\n\n  const renderPrevious = () => {\n    const output = [];\n\n    for (let index = 0; index < frameSize; index += 1) {\n      output.push(images[images.length - 1 - index]);\n    }\n\n    output.reverse();\n\n    return output;\n  };\n\n  const newPrevious = renderPrevious();\n\n  const renderNewNext = () => {\n    const output = [];\n\n    for (let index = 0; index < frameSize; index += 1) {\n      output.push(images[index]);\n    }\n\n    return output;\n  };\n\n  const newNext = renderNewNext();\n\n  const disabled = currentIndex >= images.length - frameSize && !isInfinite;\n  const customTransform = `translateX(-${currentIndex * (100 / frameSize)}%)`;\n  const customTransition = `transform ${isTransition ? animationDuration : 0}ms`;\n  const customWidth = `${frameSize * itemWidth}px`;\n\n  return (\n    <div className=\"container\">\n      <div className=\"carousel__family\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          disabled={currentIndex <= 0 && !isInfinite}\n          onClick={previousButton}\n        >\n          Previous\n        </button>\n        <div\n          className=\"carousel__container\"\n          style={{ width: customWidth }}\n        >\n          <div\n            className={`carousel__content item-count--${frameSize}`}\n            style={{\n              transform: customTransform,\n              transition: customTransition,\n            }}\n            onTransitionEnd={() => handleTransition()}\n          >\n            {isTransition}\n            {isInfinite && newPrevious.map(item => (\n              <img\n                key={`${item}`}\n                src={`${item}`}\n                alt=\"smiley\"\n              />\n            ))}\n            {images.map(image => (\n              <img\n                key={`${image}`}\n                src={`${image}`}\n                alt=\"smiley\"\n              />\n            ))}\n            {isInfinite && newNext.map(item => (\n              <img\n                key={`${item}`}\n                src={`${item}`}\n                alt=\"smiley\"\n              />\n            ))}\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          className=\"button\"\n          disabled={disabled}\n          onClick={nextButton}\n        >\n          Next\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Carousel } from '../Carousel/Carousel';\nimport './CarouselMenu.scss';\n\ntype Props = {\n  images: string[];\n};\n\nexport const CarouselMenu: React.FC<Props> = ({ images }) => {\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [isInfinite, setIsInfinite] = useState(false);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n\n  return (\n    <>\n      <Carousel\n        images={images}\n        frameSize={frameSize}\n        step={step}\n        itemWidth={itemWidth}\n        isInfinite={isInfinite}\n        animationDuration={animationDuration}\n      />\n      <ul className=\"list\">\n        <li className=\"list__item\">\n          <span>Step:</span>\n          <input\n            type=\"number\"\n            id=\"step\"\n            name=\"step\"\n            min={1}\n            max={frameSize}\n            value={step}\n            onChange={e => setStep(+e.target.value)}\n          />\n        </li>\n        <li className=\"list__item\">\n          <span>Frame Size:</span>\n          <input\n            type=\"number\"\n            id=\"frameSize\"\n            name=\"frameSize\"\n            min={1}\n            max={5}\n            value={frameSize}\n            onChange={e => setFrameSize(+e.target.value)}\n          />\n        </li>\n        <li className=\"list__item\">\n          <span>Item Width:</span>\n          <input\n            type=\"number\"\n            id=\"itemWidth\"\n            name=\"itemWidth\"\n            min={100}\n            step={10}\n            max={200}\n            value={itemWidth}\n            onChange={e => setItemWidth(+e.target.value)}\n          />\n        </li>\n        <li className=\"list__item\">\n          <span>Animation Duration:</span>\n          <input\n            type=\"number\"\n            id=\"itemWidth\"\n            name=\"itemWidth\"\n            min={0}\n            step={500}\n            max={5000}\n            value={animationDuration}\n            onChange={e => setAnimationDuration(+e.target.value)}\n          />\n        </li>\n        <li className=\"list__item\">\n          <span>Is Infinite:</span>\n          <input\n            type=\"checkbox\"\n            className=\"input__checkbox\"\n            id=\"infinite\"\n            name=\"infinite\"\n            checked={isInfinite}\n            onChange={e => setIsInfinite(e.target.checked)}\n          />\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { CarouselMenu } from './components/CarouselMenu/CarouselMenu';\n\nconst imagesFromServer = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CarouselMenu images={imagesFromServer} />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}